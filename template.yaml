AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'

Description: SAM app to send and receive faxes.

Globals:
  Function:
    Timeout: 300
    Runtime: python3.7
    CodeUri: app
    MemorySize: 128

Resources:
  EmailToFaxBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "email-to-fax-${AWS::Region}-${AWS::AccountId}"
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: 1
            Status: Enabled
            Id: CurrentObjectExpires
          - NoncurrentVersionExpirationInDays: 1
            Status: Enabled
            Id: NoncurrentObjectExpires

  EmailToFaxBucketPolicy:              
    Type: AWS::S3::BucketPolicy
    Properties: 
      Bucket: !Ref EmailToFaxBucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ses.amazonaws.com
            Action: 's3:PutObject'
            Resource: !Sub "arn:aws:s3:::email-to-fax-${AWS::Region}-${AWS::AccountId}/*"
            
  SendFaxBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "send-fax-${AWS::Region}-${AWS::AccountId}"
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: 1
            Status: Enabled
            Id: CurrentObjectExpires
          - NoncurrentVersionExpirationInDays: 1
            Status: Enabled
            Id: NoncurrentObjectExpires

  RecieveFaxBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "receive-fax-${AWS::Region}-${AWS::AccountId}"
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: 14
            Status: Enabled
            Id: CurrentObjectExpires
          - NoncurrentVersionExpirationInDays: 14
            Status: Enabled
            Id: NoncurrentObjectExpires

  EmailtoFaxFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Receives an email and saves PDF attachment into SendFaxBucket
      Handler: email_to_fax.lambda_handler
      Environment:
        Variables:
          BUCKET_NAME: !Ref 'SendFaxBucket' 
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - s3:PutObject
              Resource: !Sub "arn:aws:s3:::send-fax-${AWS::Region}-${AWS::AccountId}/*"
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:DeleteObject
              Resource: !Sub "arn:aws:s3:::email-to-fax-${AWS::Region}-${AWS::AccountId}/*"
            - Effect: Allow
              Action:
                - ssm:GetParameter
              Resource:
              - Fn::Sub: arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/prod/fax_emails
              - Fn::Sub: arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/prod/admin_email
              - Fn::Sub: arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/prod/aws_email
              - Fn::Sub: arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/prod/twilio
      Events:
        EmailUpload:
          Type: S3
          Properties:
            Bucket: 
              Ref: EmailToFaxBucket
            Events:
              - s3:ObjectCreated:*





  SendFaxFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: send_fax.lambda_handler
      Description: Generates pre-signed url for S3 object and sends to Twilio
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
              Resource: !Sub "arn:aws:s3:::send-fax-${AWS::Region}-${AWS::AccountId}/*"
            - Effect: Allow
              Action:
                - ssm:GetParameter
              Resource:
              - Fn::Sub: arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/prod/twilio
      Events:
        PDFUpload:
          Type: S3
          Properties:
            Bucket: 
              Ref: SendFaxBucket
            Events:
              - s3:ObjectCreated:*

  AWSFaxApi:
    Type: AWS::Serverless::Api
    Properties: 
      StageName: Prod
      GatewayResponses:
        ACCESS_DENIED: # This is to prevent more specific responses being sent to requester
          StatusCode: 401
          ResponseTemplates: 
            "application/json": '{ "message": "Unauthorized" }'
      Auth:
        DefaultAuthorizer: AWSFaxApiAuthorizer
        Authorizers:
          AWSFaxApiAuthorizer:
            FunctionPayloadType: REQUEST
            FunctionArn: !GetAtt FaxAPIAuthFunction.Arn
            Identity:
              ReauthorizeEvery: 300 #Default value, included for awareness
              QueryStrings:
                - id
                - key             

  ReceiveFaxFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: receive_fax.lambda_handler
      Environment:
        Variables:
          BUCKET_NAME: !Ref 'RecieveFaxBucket' 
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - s3:PutObject
              Resource: !Sub "arn:aws:s3:::${RecieveFaxBucket}/*"
      Events:
        FaxCheck:
          Type: Api
          Properties:
            RestApiId: !Ref "AWSFaxApi"
            Path: /fax/check
            Method: post
        FaxReceive:
          Type: Api
          Properties:
            RestApiId: !Ref "AWSFaxApi"
            Path: /fax/receive
            Method: post
  
  FaxAPIAuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: API authorizer function for all methods
      Handler: api_authorizer.lambda_handler
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: apigateway:GET
              Resource: !Sub arn:aws:apigateway:us-west-2::/apikeys/${TwilioAPIKey}

  FaxToEmailFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: fax_to_email.lambda_handler
      Description: Sends an email when a pdf is put into ReceiveBucket
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
              Resource: !Sub "arn:aws:s3:::receive-fax-${AWS::Region}-${AWS::AccountId}/*"
            - Effect: Allow
              Action:
                - ssm:GetParameter
              Resource:
              - Fn::Sub: arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/prod/fax_to_email
      Events:
        PDFUpload:
          Type: S3
          Properties:
            Bucket: 
              Ref: RecieveFaxBucket
            Events:
              - s3:ObjectCreated:*

  TwilioAPIKey:
    Type: AWS::ApiGateway::ApiKey
    Properties:
      Description: API key for Twilio
      Enabled: True

Outputs:
  ReceiveFaxApi:
    Description: "API Gateway endpoint URL for Prod stage for ReceiveFax function"
    Value: !Sub "https://${AWSFaxApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
  EmailToFaxBucket:
    Description: "Name for the EmailToFaxBucket"
    Value: !Ref EmailToFaxBucket
